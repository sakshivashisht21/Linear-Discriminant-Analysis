import pandas as pd
import sklearn.metrics as mt
import sklearn.model_selection as smd
import sklearn.tree as sk

#import matplotlib.pyplot as plt
def printModelSummary(actual, predicted):
 '''
 Method to print out model summaries
 '''
 print('Overall accuracy of the model is {0:.2f} percent'\
 .format(
 (actual == predicted).sum() /len(actual) * 100))
 print('Confusion matrix: \n', mt.confusion_matrix(actual, predicted))
 print('Classification report: \n', mt.classification_report(actual,
 predicted))
 print('ROC: ', mt.roc_auc_score(actual, predicted))

def fitDecisionTree(data):
 '''
 Build a decision tree classifier
 '''
 # create the classifier object
 tree = sk.DecisionTreeClassifier(min_samples_split=100)
 # fit the data
 tree.fit(data[0],data[1])
 # return the classifier
 return tree
# the file name of the dataset
r_filename ='path/bank_contacts.csv'
# read the data
csv_read = pd.read_csv(r_filename)
y=csv_read['credit_application']
x=csv_read.drop(columns='credit_application') #all columns except credit_application
labels=x.columns

#LDA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
clf = LinearDiscriminantAnalysis()
train=clf.fit_transform(x,y)
train_x, test_x, train_y, test_y =smd.train_test_split(train, y, test_size=0.33, random_state=42)
# train the model
classifier = fitDecisionTree((train_x, train_y))
# classify the unseen data
predicted = classifier.predict(test_x)
# print out the results
printModelSummary(test_y, predicted)
# print out the importance of features
for counter, (nm, label) \
 in enumerate(
 zip(labels, classifier.feature_importances_)
 ):
 print("{0}. {1}: {2}".format(counter, nm,label))
